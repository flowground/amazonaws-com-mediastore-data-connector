{
    "openapi": "3.0.0",
    "servers": [
        {
            "url": "https://data.mediastore.amazonaws.com/"
        },
        {
            "url": "http://data.mediastore.amazonaws.com/"
        }
    ],
    "x-hasEquivalentPaths": true,
    "info": {
        "contact": {
            "email": "mike.ralphson@gmail.com",
            "name": "Mike Ralphson",
            "url": "https://github.com/mermade/aws2openapi",
            "x-twitter": "PermittedSoc"
        },
        "description": "An AWS Elemental MediaStore asset is an object, similar to an object in the Amazon S3 service. Objects are the fundamental entities that are stored in AWS Elemental MediaStore.",
        "license": {
            "name": "Apache 2.0 License",
            "url": "http://www.apache.org/licenses/"
        },
        "termsOfService": "https://aws.amazon.com/service-terms/",
        "title": "AWS Elemental MediaStore Data Plane",
        "version": "2017-09-01",
        "x-apiClientRegistration": {
            "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
        },
        "x-apisguru-categories": [
            "cloud"
        ],
        "x-logo": {
            "backgroundColor": "#FFFFFF",
            "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.jpeg"
        },
        "x-origin": [
            {
                "contentType": "application/json",
                "converter": {
                    "url": "https://github.com/mermade/aws2openapi",
                    "version": "1.0.0"
                },
                "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/mediastore-data-2017-09-01.normal.json",
                "x-apisguru-direct": true
            }
        ],
        "x-preferred": true,
        "x-providerName": "amazonaws.com",
        "x-release": "v4",
        "x-serviceName": "mediastore-data"
    },
    "externalDocs": {
        "description": "Amazon Web Services documentation",
        "url": "https://docs.aws.amazon.com/mediastore/"
    },
    "security": [
        {
            "hmac": []
        }
    ],
    "paths": {
        "/": {
            "get": {
                "description": "Provides a list of metadata entries about folders and objects in the specified folder.",
                "operationId": "ListItems",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Items": {
                                            "description": "The metadata entries for the folders and objects at the requested path.",
                                            "items": {
                                                "description": "A metadata entry for a folder or object.",
                                                "properties": {
                                                    "ContentLength": {
                                                        "description": "The length of the item in bytes.",
                                                        "minimum": 0,
                                                        "type": "integer"
                                                    },
                                                    "ContentType": {
                                                        "description": "The content type of the item.",
                                                        "pattern": "^[\\w\\-\\/\\.\\+]{1,255}$",
                                                        "type": "string"
                                                    },
                                                    "ETag": {
                                                        "description": "The ETag that represents a unique instance of the item.",
                                                        "maxLength": 64,
                                                        "minLength": 1,
                                                        "pattern": "[0-9A-Fa-f]+",
                                                        "type": "string"
                                                    },
                                                    "LastModified": {
                                                        "description": "The date and time that the item was last modified.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "Name": {
                                                        "description": "The name of the item.",
                                                        "pattern": "[A-Za-z0-9_\\.\\-\\~]+",
                                                        "type": "string"
                                                    },
                                                    "Type": {
                                                        "description": "The item type (folder or object).",
                                                        "enum": [
                                                            "OBJECT",
                                                            "FOLDER"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "NextToken": {
                                            "description": "The token that can be used in a request to view the next set of results. For example, you submit a <code>ListItems</code> request that matches 2,000 items with <code>MaxResults</code> set at 500. The service returns the first batch of results (up to 500) and a <code>NextToken</code> value that can be used to fetch the next batch of results.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ContainerNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/{Path}": {
            "delete": {
                "description": "Deletes an object at the specified path.",
                "operationId": "DeleteObject",
                "parameters": [
                    {
                        "in": "path",
                        "name": "Path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ContainerNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ObjectNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "get": {
                "description": "Downloads the object at the specified path.",
                "operationId": "GetObject",
                "parameters": [
                    {
                        "in": "path",
                        "name": "Path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Body": {
                                            "description": "The bytes of the object. ",
                                            "type": "string"
                                        },
                                        "StatusCode": {
                                            "description": "The HTML status code of the request. Status codes ranging from 200 to 299 indicate success. All other status codes indicate the type of error that occurred.",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ContainerNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ObjectNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "RequestedRangeNotSatisfiableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "head": {
                "description": "Gets the headers for an object at the specified path.",
                "operationId": "DescribeObject",
                "parameters": [
                    {
                        "in": "path",
                        "name": "Path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ContainerNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ObjectNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "put": {
                "description": "Uploads an object to the specified path. Object sizes are limited to 25 MB.",
                "operationId": "PutObject",
                "parameters": [
                    {
                        "in": "path",
                        "name": "Path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ContentSHA256": {
                                            "description": "The SHA256 digest of the object that is persisted.",
                                            "maxLength": 64,
                                            "minLength": 64,
                                            "pattern": "[0-9A-Fa-f]{64}",
                                            "type": "string"
                                        },
                                        "ETag": {
                                            "description": "Unique identifier of the object in the container.",
                                            "maxLength": 64,
                                            "minLength": 1,
                                            "pattern": "[0-9A-Fa-f]+",
                                            "type": "string"
                                        },
                                        "StorageClass": {
                                            "description": "The storage class where the object was persisted. The class should be “Temporal”.",
                                            "enum": [
                                                "TEMPORAL"
                                            ],
                                            "maxLength": 16,
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ContainerNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InternalServerError",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Body": {
                                        "description": "The bytes to be stored. ",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "Body"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        }
    },
    "components": {
        "schemas": {
            "ContainerNotFoundException": {},
            "ContentRangePattern": {
                "pattern": "^bytes=\\d+\\-\\d+/\\d+$",
                "type": "string"
            },
            "ContentType": {
                "pattern": "^[\\w\\-\\/\\.\\+]{1,255}$",
                "type": "string"
            },
            "DeleteObjectRequest": {
                "properties": {},
                "type": "object"
            },
            "DeleteObjectResponse": {
                "properties": {},
                "type": "object"
            },
            "DescribeObjectRequest": {
                "properties": {},
                "type": "object"
            },
            "DescribeObjectResponse": {
                "properties": {},
                "type": "object"
            },
            "ETag": {
                "maxLength": 64,
                "minLength": 1,
                "pattern": "[0-9A-Fa-f]+",
                "type": "string"
            },
            "GetObjectRequest": {
                "properties": {},
                "type": "object"
            },
            "GetObjectResponse": {
                "properties": {
                    "Body": {
                        "description": "The bytes of the object. ",
                        "type": "string"
                    },
                    "StatusCode": {
                        "description": "The HTML status code of the request. Status codes ranging from 200 to 299 indicate success. All other status codes indicate the type of error that occurred.",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "InternalServerError": {},
            "Item": {
                "description": "A metadata entry for a folder or object.",
                "properties": {
                    "ContentLength": {
                        "description": "The length of the item in bytes.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "ContentType": {
                        "description": "The content type of the item.",
                        "pattern": "^[\\w\\-\\/\\.\\+]{1,255}$",
                        "type": "string"
                    },
                    "ETag": {
                        "description": "The ETag that represents a unique instance of the item.",
                        "maxLength": 64,
                        "minLength": 1,
                        "pattern": "[0-9A-Fa-f]+",
                        "type": "string"
                    },
                    "LastModified": {
                        "description": "The date and time that the item was last modified.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "Name": {
                        "description": "The name of the item.",
                        "pattern": "[A-Za-z0-9_\\.\\-\\~]+",
                        "type": "string"
                    },
                    "Type": {
                        "description": "The item type (folder or object).",
                        "enum": [
                            "OBJECT",
                            "FOLDER"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ItemList": {
                "items": {
                    "description": "A metadata entry for a folder or object.",
                    "properties": {
                        "ContentLength": {
                            "description": "The length of the item in bytes.",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "ContentType": {
                            "description": "The content type of the item.",
                            "pattern": "^[\\w\\-\\/\\.\\+]{1,255}$",
                            "type": "string"
                        },
                        "ETag": {
                            "description": "The ETag that represents a unique instance of the item.",
                            "maxLength": 64,
                            "minLength": 1,
                            "pattern": "[0-9A-Fa-f]+",
                            "type": "string"
                        },
                        "LastModified": {
                            "description": "The date and time that the item was last modified.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "Name": {
                            "description": "The name of the item.",
                            "pattern": "[A-Za-z0-9_\\.\\-\\~]+",
                            "type": "string"
                        },
                        "Type": {
                            "description": "The item type (folder or object).",
                            "enum": [
                                "OBJECT",
                                "FOLDER"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "ItemName": {
                "pattern": "[A-Za-z0-9_\\.\\-\\~]+",
                "type": "string"
            },
            "ItemType": {
                "enum": [
                    "OBJECT",
                    "FOLDER"
                ],
                "type": "string"
            },
            "ListItemsRequest": {
                "properties": {},
                "type": "object"
            },
            "ListItemsResponse": {
                "properties": {
                    "Items": {
                        "description": "The metadata entries for the folders and objects at the requested path.",
                        "items": {
                            "description": "A metadata entry for a folder or object.",
                            "properties": {
                                "ContentLength": {
                                    "description": "The length of the item in bytes.",
                                    "minimum": 0,
                                    "type": "integer"
                                },
                                "ContentType": {
                                    "description": "The content type of the item.",
                                    "pattern": "^[\\w\\-\\/\\.\\+]{1,255}$",
                                    "type": "string"
                                },
                                "ETag": {
                                    "description": "The ETag that represents a unique instance of the item.",
                                    "maxLength": 64,
                                    "minLength": 1,
                                    "pattern": "[0-9A-Fa-f]+",
                                    "type": "string"
                                },
                                "LastModified": {
                                    "description": "The date and time that the item was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "Name": {
                                    "description": "The name of the item.",
                                    "pattern": "[A-Za-z0-9_\\.\\-\\~]+",
                                    "type": "string"
                                },
                                "Type": {
                                    "description": "The item type (folder or object).",
                                    "enum": [
                                        "OBJECT",
                                        "FOLDER"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "NextToken": {
                        "description": "The token that can be used in a request to view the next set of results. For example, you submit a <code>ListItems</code> request that matches 2,000 items with <code>MaxResults</code> set at 500. The service returns the first batch of results (up to 500) and a <code>NextToken</code> value that can be used to fetch the next batch of results.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ListLimit": {
                "maximum": 1000,
                "minimum": 1,
                "type": "integer"
            },
            "ListPathNaming": {
                "maxLength": 900,
                "minLength": 0,
                "pattern": "/?(?:[A-Za-z0-9_\\.\\-\\~]+/){0,10}(?:[A-Za-z0-9_\\.\\-\\~]+)?/?",
                "type": "string"
            },
            "NonNegativeLong": {
                "minimum": 0,
                "type": "integer"
            },
            "ObjectNotFoundException": {},
            "PaginationToken": {
                "type": "string"
            },
            "PathNaming": {
                "maxLength": 900,
                "minLength": 1,
                "pattern": "(?:[A-Za-z0-9_\\.\\-\\~]+/){0,10}[A-Za-z0-9_\\.\\-\\~]+",
                "type": "string"
            },
            "PayloadBlob": {
                "type": "string"
            },
            "PutObjectRequest": {
                "properties": {
                    "Body": {
                        "description": "The bytes to be stored. ",
                        "type": "string"
                    }
                },
                "required": [
                    "Body"
                ],
                "type": "object"
            },
            "PutObjectResponse": {
                "properties": {
                    "ContentSHA256": {
                        "description": "The SHA256 digest of the object that is persisted.",
                        "maxLength": 64,
                        "minLength": 64,
                        "pattern": "[0-9A-Fa-f]{64}",
                        "type": "string"
                    },
                    "ETag": {
                        "description": "Unique identifier of the object in the container.",
                        "maxLength": 64,
                        "minLength": 1,
                        "pattern": "[0-9A-Fa-f]+",
                        "type": "string"
                    },
                    "StorageClass": {
                        "description": "The storage class where the object was persisted. The class should be “Temporal”.",
                        "enum": [
                            "TEMPORAL"
                        ],
                        "maxLength": 16,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "RangePattern": {
                "pattern": "^bytes=(?:\\d+\\-\\d*|\\d*\\-\\d+)$",
                "type": "string"
            },
            "RequestedRangeNotSatisfiableException": {},
            "SHA256Hash": {
                "maxLength": 64,
                "minLength": 64,
                "pattern": "[0-9A-Fa-f]{64}",
                "type": "string"
            },
            "StorageClass": {
                "enum": [
                    "TEMPORAL"
                ],
                "maxLength": 16,
                "minLength": 1,
                "type": "string"
            },
            "StringPrimitive": {
                "type": "string"
            },
            "TimeStamp": {
                "format": "date-time",
                "type": "string"
            },
            "statusCode": {
                "type": "integer"
            }
        },
        "parameters": {
            "Action": {
                "in": "query",
                "name": "Action",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "Version": {
                "in": "query",
                "name": "Version",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Algorithm": {
                "in": "header",
                "name": "X-Amz-Algorithm",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Content-Sha256": {
                "in": "header",
                "name": "X-Amz-Content-Sha256",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Credential": {
                "in": "header",
                "name": "X-Amz-Credential",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Date": {
                "in": "header",
                "name": "X-Amz-Date",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Security-Token": {
                "in": "header",
                "name": "X-Amz-Security-Token",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Signature": {
                "in": "header",
                "name": "X-Amz-Signature",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-SignedHeaders": {
                "in": "header",
                "name": "X-Amz-SignedHeaders",
                "required": false,
                "schema": {
                    "type": "string"
                }
            }
        },
        "requestBodies": {
            "ListItemsBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {},
                            "type": "object"
                        }
                    }
                },
                "required": true
            }
        },
        "securitySchemes": {
            "hmac": {
                "description": "Amazon Signature authorization v4",
                "in": "header",
                "name": "Authorization",
                "type": "apiKey",
                "x-amazon-apigateway-authtype": "awsSigv4"
            }
        }
    }
}